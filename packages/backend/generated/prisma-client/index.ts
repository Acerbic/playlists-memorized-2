// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  playlist: (where?: PlaylistWhereInput) => Promise<boolean>;
  snapshot: (where?: SnapshotWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  userAuth: (where?: UserAuthWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  playlist: (where: PlaylistWhereUniqueInput) => PlaylistNullablePromise;
  playlists: (args?: {
    where?: PlaylistWhereInput;
    orderBy?: PlaylistOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Playlist>;
  playlistsConnection: (args?: {
    where?: PlaylistWhereInput;
    orderBy?: PlaylistOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PlaylistConnectionPromise;
  snapshot: (where: SnapshotWhereUniqueInput) => SnapshotNullablePromise;
  snapshots: (args?: {
    where?: SnapshotWhereInput;
    orderBy?: SnapshotOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Snapshot>;
  snapshotsConnection: (args?: {
    where?: SnapshotWhereInput;
    orderBy?: SnapshotOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SnapshotConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  userAuth: (where: UserAuthWhereUniqueInput) => UserAuthNullablePromise;
  userAuths: (args?: {
    where?: UserAuthWhereInput;
    orderBy?: UserAuthOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<UserAuth>;
  userAuthsConnection: (args?: {
    where?: UserAuthWhereInput;
    orderBy?: UserAuthOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserAuthConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createPlaylist: (data: PlaylistCreateInput) => PlaylistPromise;
  updatePlaylist: (args: {
    data: PlaylistUpdateInput;
    where: PlaylistWhereUniqueInput;
  }) => PlaylistPromise;
  updateManyPlaylists: (args: {
    data: PlaylistUpdateManyMutationInput;
    where?: PlaylistWhereInput;
  }) => BatchPayloadPromise;
  upsertPlaylist: (args: {
    where: PlaylistWhereUniqueInput;
    create: PlaylistCreateInput;
    update: PlaylistUpdateInput;
  }) => PlaylistPromise;
  deletePlaylist: (where: PlaylistWhereUniqueInput) => PlaylistPromise;
  deleteManyPlaylists: (where?: PlaylistWhereInput) => BatchPayloadPromise;
  createSnapshot: (data: SnapshotCreateInput) => SnapshotPromise;
  updateSnapshot: (args: {
    data: SnapshotUpdateInput;
    where: SnapshotWhereUniqueInput;
  }) => SnapshotPromise;
  updateManySnapshots: (args: {
    data: SnapshotUpdateManyMutationInput;
    where?: SnapshotWhereInput;
  }) => BatchPayloadPromise;
  upsertSnapshot: (args: {
    where: SnapshotWhereUniqueInput;
    create: SnapshotCreateInput;
    update: SnapshotUpdateInput;
  }) => SnapshotPromise;
  deleteSnapshot: (where: SnapshotWhereUniqueInput) => SnapshotPromise;
  deleteManySnapshots: (where?: SnapshotWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createUserAuth: (data: UserAuthCreateInput) => UserAuthPromise;
  updateUserAuth: (args: {
    data: UserAuthUpdateInput;
    where: UserAuthWhereUniqueInput;
  }) => UserAuthPromise;
  updateManyUserAuths: (args: {
    data: UserAuthUpdateManyMutationInput;
    where?: UserAuthWhereInput;
  }) => BatchPayloadPromise;
  upsertUserAuth: (args: {
    where: UserAuthWhereUniqueInput;
    create: UserAuthCreateInput;
    update: UserAuthUpdateInput;
  }) => UserAuthPromise;
  deleteUserAuth: (where: UserAuthWhereUniqueInput) => UserAuthPromise;
  deleteManyUserAuths: (where?: UserAuthWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  playlist: (
    where?: PlaylistSubscriptionWhereInput
  ) => PlaylistSubscriptionPayloadSubscription;
  snapshot: (
    where?: SnapshotSubscriptionWhereInput
  ) => SnapshotSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  userAuth: (
    where?: UserAuthSubscriptionWhereInput
  ) => UserAuthSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type PlaylistType = "YOUTUBE";

export type SnapshotOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "created_at_ASC"
  | "created_at_DESC"
  | "data_ASC"
  | "data_DESC";

export type PlaylistOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "created_at_ASC"
  | "created_at_DESC"
  | "modified_at_ASC"
  | "modified_at_DESC"
  | "type_ASC"
  | "type_DESC"
  | "source_id_ASC"
  | "source_id_DESC";

export type AuthType = "GOOGLE";

export type UserAuthOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "type_ASC"
  | "type_DESC"
  | "authId_ASC"
  | "authId_DESC"
  | "extra_ASC"
  | "extra_DESC";

export type UserOrderByInput = "id_ASC" | "id_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type PlaylistWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface SnapshotWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  created_at?: Maybe<DateTimeInput>;
  created_at_not?: Maybe<DateTimeInput>;
  created_at_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  created_at_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  created_at_lt?: Maybe<DateTimeInput>;
  created_at_lte?: Maybe<DateTimeInput>;
  created_at_gt?: Maybe<DateTimeInput>;
  created_at_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<SnapshotWhereInput[] | SnapshotWhereInput>;
}

export interface PlaylistWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  created_at?: Maybe<DateTimeInput>;
  created_at_not?: Maybe<DateTimeInput>;
  created_at_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  created_at_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  created_at_lt?: Maybe<DateTimeInput>;
  created_at_lte?: Maybe<DateTimeInput>;
  created_at_gt?: Maybe<DateTimeInput>;
  created_at_gte?: Maybe<DateTimeInput>;
  modified_at?: Maybe<DateTimeInput>;
  modified_at_not?: Maybe<DateTimeInput>;
  modified_at_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  modified_at_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  modified_at_lt?: Maybe<DateTimeInput>;
  modified_at_lte?: Maybe<DateTimeInput>;
  modified_at_gt?: Maybe<DateTimeInput>;
  modified_at_gte?: Maybe<DateTimeInput>;
  type?: Maybe<PlaylistType>;
  type_not?: Maybe<PlaylistType>;
  type_in?: Maybe<PlaylistType[] | PlaylistType>;
  type_not_in?: Maybe<PlaylistType[] | PlaylistType>;
  source_id?: Maybe<String>;
  source_id_not?: Maybe<String>;
  source_id_in?: Maybe<String[] | String>;
  source_id_not_in?: Maybe<String[] | String>;
  source_id_lt?: Maybe<String>;
  source_id_lte?: Maybe<String>;
  source_id_gt?: Maybe<String>;
  source_id_gte?: Maybe<String>;
  source_id_contains?: Maybe<String>;
  source_id_not_contains?: Maybe<String>;
  source_id_starts_with?: Maybe<String>;
  source_id_not_starts_with?: Maybe<String>;
  source_id_ends_with?: Maybe<String>;
  source_id_not_ends_with?: Maybe<String>;
  snapshots_some?: Maybe<SnapshotWhereInput>;
  AND?: Maybe<PlaylistWhereInput[] | PlaylistWhereInput>;
}

export type SnapshotWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserAuthWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  type?: Maybe<AuthType>;
  type_not?: Maybe<AuthType>;
  type_in?: Maybe<AuthType[] | AuthType>;
  type_not_in?: Maybe<AuthType[] | AuthType>;
  user?: Maybe<UserWhereInput>;
  authId?: Maybe<String>;
  authId_not?: Maybe<String>;
  authId_in?: Maybe<String[] | String>;
  authId_not_in?: Maybe<String[] | String>;
  authId_lt?: Maybe<String>;
  authId_lte?: Maybe<String>;
  authId_gt?: Maybe<String>;
  authId_gte?: Maybe<String>;
  authId_contains?: Maybe<String>;
  authId_not_contains?: Maybe<String>;
  authId_starts_with?: Maybe<String>;
  authId_not_starts_with?: Maybe<String>;
  authId_ends_with?: Maybe<String>;
  authId_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserAuthWhereInput[] | UserAuthWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  auths_some?: Maybe<UserAuthWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export type UserAuthWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface PlaylistCreateInput {
  id?: Maybe<ID_Input>;
  created_at: DateTimeInput;
  modified_at: DateTimeInput;
  type: PlaylistType;
  source_id: String;
  snapshots?: Maybe<SnapshotCreateManyInput>;
}

export interface SnapshotCreateManyInput {
  create?: Maybe<SnapshotCreateInput[] | SnapshotCreateInput>;
  connect?: Maybe<SnapshotWhereUniqueInput[] | SnapshotWhereUniqueInput>;
}

export interface SnapshotCreateInput {
  id?: Maybe<ID_Input>;
  created_at: DateTimeInput;
  data?: Maybe<Json>;
}

export interface PlaylistUpdateInput {
  created_at?: Maybe<DateTimeInput>;
  modified_at?: Maybe<DateTimeInput>;
  type?: Maybe<PlaylistType>;
  source_id?: Maybe<String>;
  snapshots?: Maybe<SnapshotUpdateManyInput>;
}

export interface SnapshotUpdateManyInput {
  create?: Maybe<SnapshotCreateInput[] | SnapshotCreateInput>;
  update?: Maybe<
    | SnapshotUpdateWithWhereUniqueNestedInput[]
    | SnapshotUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | SnapshotUpsertWithWhereUniqueNestedInput[]
    | SnapshotUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<SnapshotWhereUniqueInput[] | SnapshotWhereUniqueInput>;
  connect?: Maybe<SnapshotWhereUniqueInput[] | SnapshotWhereUniqueInput>;
  set?: Maybe<SnapshotWhereUniqueInput[] | SnapshotWhereUniqueInput>;
  disconnect?: Maybe<SnapshotWhereUniqueInput[] | SnapshotWhereUniqueInput>;
  deleteMany?: Maybe<SnapshotScalarWhereInput[] | SnapshotScalarWhereInput>;
  updateMany?: Maybe<
    | SnapshotUpdateManyWithWhereNestedInput[]
    | SnapshotUpdateManyWithWhereNestedInput
  >;
}

export interface SnapshotUpdateWithWhereUniqueNestedInput {
  where: SnapshotWhereUniqueInput;
  data: SnapshotUpdateDataInput;
}

export interface SnapshotUpdateDataInput {
  created_at?: Maybe<DateTimeInput>;
  data?: Maybe<Json>;
}

export interface SnapshotUpsertWithWhereUniqueNestedInput {
  where: SnapshotWhereUniqueInput;
  update: SnapshotUpdateDataInput;
  create: SnapshotCreateInput;
}

export interface SnapshotScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  created_at?: Maybe<DateTimeInput>;
  created_at_not?: Maybe<DateTimeInput>;
  created_at_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  created_at_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  created_at_lt?: Maybe<DateTimeInput>;
  created_at_lte?: Maybe<DateTimeInput>;
  created_at_gt?: Maybe<DateTimeInput>;
  created_at_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<SnapshotScalarWhereInput[] | SnapshotScalarWhereInput>;
  OR?: Maybe<SnapshotScalarWhereInput[] | SnapshotScalarWhereInput>;
  NOT?: Maybe<SnapshotScalarWhereInput[] | SnapshotScalarWhereInput>;
}

export interface SnapshotUpdateManyWithWhereNestedInput {
  where: SnapshotScalarWhereInput;
  data: SnapshotUpdateManyDataInput;
}

export interface SnapshotUpdateManyDataInput {
  created_at?: Maybe<DateTimeInput>;
  data?: Maybe<Json>;
}

export interface PlaylistUpdateManyMutationInput {
  created_at?: Maybe<DateTimeInput>;
  modified_at?: Maybe<DateTimeInput>;
  type?: Maybe<PlaylistType>;
  source_id?: Maybe<String>;
}

export interface SnapshotUpdateInput {
  created_at?: Maybe<DateTimeInput>;
  data?: Maybe<Json>;
}

export interface SnapshotUpdateManyMutationInput {
  created_at?: Maybe<DateTimeInput>;
  data?: Maybe<Json>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  auths?: Maybe<UserAuthCreateManyWithoutUserInput>;
}

export interface UserAuthCreateManyWithoutUserInput {
  create?: Maybe<
    UserAuthCreateWithoutUserInput[] | UserAuthCreateWithoutUserInput
  >;
  connect?: Maybe<UserAuthWhereUniqueInput[] | UserAuthWhereUniqueInput>;
}

export interface UserAuthCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  type: AuthType;
  authId: String;
  extra?: Maybe<Json>;
}

export interface UserUpdateInput {
  auths?: Maybe<UserAuthUpdateManyWithoutUserInput>;
}

export interface UserAuthUpdateManyWithoutUserInput {
  create?: Maybe<
    UserAuthCreateWithoutUserInput[] | UserAuthCreateWithoutUserInput
  >;
  delete?: Maybe<UserAuthWhereUniqueInput[] | UserAuthWhereUniqueInput>;
  connect?: Maybe<UserAuthWhereUniqueInput[] | UserAuthWhereUniqueInput>;
  set?: Maybe<UserAuthWhereUniqueInput[] | UserAuthWhereUniqueInput>;
  disconnect?: Maybe<UserAuthWhereUniqueInput[] | UserAuthWhereUniqueInput>;
  update?: Maybe<
    | UserAuthUpdateWithWhereUniqueWithoutUserInput[]
    | UserAuthUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | UserAuthUpsertWithWhereUniqueWithoutUserInput[]
    | UserAuthUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<UserAuthScalarWhereInput[] | UserAuthScalarWhereInput>;
  updateMany?: Maybe<
    | UserAuthUpdateManyWithWhereNestedInput[]
    | UserAuthUpdateManyWithWhereNestedInput
  >;
}

export interface UserAuthUpdateWithWhereUniqueWithoutUserInput {
  where: UserAuthWhereUniqueInput;
  data: UserAuthUpdateWithoutUserDataInput;
}

export interface UserAuthUpdateWithoutUserDataInput {
  type?: Maybe<AuthType>;
  authId?: Maybe<String>;
  extra?: Maybe<Json>;
}

export interface UserAuthUpsertWithWhereUniqueWithoutUserInput {
  where: UserAuthWhereUniqueInput;
  update: UserAuthUpdateWithoutUserDataInput;
  create: UserAuthCreateWithoutUserInput;
}

export interface UserAuthScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  type?: Maybe<AuthType>;
  type_not?: Maybe<AuthType>;
  type_in?: Maybe<AuthType[] | AuthType>;
  type_not_in?: Maybe<AuthType[] | AuthType>;
  authId?: Maybe<String>;
  authId_not?: Maybe<String>;
  authId_in?: Maybe<String[] | String>;
  authId_not_in?: Maybe<String[] | String>;
  authId_lt?: Maybe<String>;
  authId_lte?: Maybe<String>;
  authId_gt?: Maybe<String>;
  authId_gte?: Maybe<String>;
  authId_contains?: Maybe<String>;
  authId_not_contains?: Maybe<String>;
  authId_starts_with?: Maybe<String>;
  authId_not_starts_with?: Maybe<String>;
  authId_ends_with?: Maybe<String>;
  authId_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserAuthScalarWhereInput[] | UserAuthScalarWhereInput>;
  OR?: Maybe<UserAuthScalarWhereInput[] | UserAuthScalarWhereInput>;
  NOT?: Maybe<UserAuthScalarWhereInput[] | UserAuthScalarWhereInput>;
}

export interface UserAuthUpdateManyWithWhereNestedInput {
  where: UserAuthScalarWhereInput;
  data: UserAuthUpdateManyDataInput;
}

export interface UserAuthUpdateManyDataInput {
  type?: Maybe<AuthType>;
  authId?: Maybe<String>;
  extra?: Maybe<Json>;
}

export interface UserAuthCreateInput {
  id?: Maybe<ID_Input>;
  type: AuthType;
  user: UserCreateOneWithoutAuthsInput;
  authId: String;
  extra?: Maybe<Json>;
}

export interface UserCreateOneWithoutAuthsInput {
  create?: Maybe<UserCreateWithoutAuthsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutAuthsInput {
  id?: Maybe<ID_Input>;
}

export interface UserAuthUpdateInput {
  type?: Maybe<AuthType>;
  user?: Maybe<UserUpdateOneRequiredWithoutAuthsInput>;
  authId?: Maybe<String>;
  extra?: Maybe<Json>;
}

export interface UserUpdateOneRequiredWithoutAuthsInput {
  create?: Maybe<UserCreateWithoutAuthsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserAuthUpdateManyMutationInput {
  type?: Maybe<AuthType>;
  authId?: Maybe<String>;
  extra?: Maybe<Json>;
}

export interface PlaylistSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PlaylistWhereInput>;
  AND?: Maybe<
    PlaylistSubscriptionWhereInput[] | PlaylistSubscriptionWhereInput
  >;
}

export interface SnapshotSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SnapshotWhereInput>;
  AND?: Maybe<
    SnapshotSubscriptionWhereInput[] | SnapshotSubscriptionWhereInput
  >;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface UserAuthSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserAuthWhereInput>;
  AND?: Maybe<
    UserAuthSubscriptionWhereInput[] | UserAuthSubscriptionWhereInput
  >;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Playlist {
  id: ID_Output;
  created_at: DateTimeOutput;
  modified_at: DateTimeOutput;
  type: PlaylistType;
  source_id: String;
}

export interface PlaylistPromise extends Promise<Playlist>, Fragmentable {
  id: () => Promise<ID_Output>;
  created_at: () => Promise<DateTimeOutput>;
  modified_at: () => Promise<DateTimeOutput>;
  type: () => Promise<PlaylistType>;
  source_id: () => Promise<String>;
  snapshots: <T = FragmentableArray<Snapshot>>(args?: {
    where?: SnapshotWhereInput;
    orderBy?: SnapshotOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface PlaylistSubscription
  extends Promise<AsyncIterator<Playlist>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  created_at: () => Promise<AsyncIterator<DateTimeOutput>>;
  modified_at: () => Promise<AsyncIterator<DateTimeOutput>>;
  type: () => Promise<AsyncIterator<PlaylistType>>;
  source_id: () => Promise<AsyncIterator<String>>;
  snapshots: <T = Promise<AsyncIterator<SnapshotSubscription>>>(args?: {
    where?: SnapshotWhereInput;
    orderBy?: SnapshotOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface PlaylistNullablePromise
  extends Promise<Playlist | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  created_at: () => Promise<DateTimeOutput>;
  modified_at: () => Promise<DateTimeOutput>;
  type: () => Promise<PlaylistType>;
  source_id: () => Promise<String>;
  snapshots: <T = FragmentableArray<Snapshot>>(args?: {
    where?: SnapshotWhereInput;
    orderBy?: SnapshotOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Snapshot {
  id: ID_Output;
  created_at: DateTimeOutput;
  data?: Json;
}

export interface SnapshotPromise extends Promise<Snapshot>, Fragmentable {
  id: () => Promise<ID_Output>;
  created_at: () => Promise<DateTimeOutput>;
  data: () => Promise<Json>;
}

export interface SnapshotSubscription
  extends Promise<AsyncIterator<Snapshot>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  created_at: () => Promise<AsyncIterator<DateTimeOutput>>;
  data: () => Promise<AsyncIterator<Json>>;
}

export interface SnapshotNullablePromise
  extends Promise<Snapshot | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  created_at: () => Promise<DateTimeOutput>;
  data: () => Promise<Json>;
}

export interface PlaylistConnection {
  pageInfo: PageInfo;
  edges: PlaylistEdge[];
}

export interface PlaylistConnectionPromise
  extends Promise<PlaylistConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PlaylistEdge>>() => T;
  aggregate: <T = AggregatePlaylistPromise>() => T;
}

export interface PlaylistConnectionSubscription
  extends Promise<AsyncIterator<PlaylistConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PlaylistEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePlaylistSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface PlaylistEdge {
  node: Playlist;
  cursor: String;
}

export interface PlaylistEdgePromise
  extends Promise<PlaylistEdge>,
    Fragmentable {
  node: <T = PlaylistPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PlaylistEdgeSubscription
  extends Promise<AsyncIterator<PlaylistEdge>>,
    Fragmentable {
  node: <T = PlaylistSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePlaylist {
  count: Int;
}

export interface AggregatePlaylistPromise
  extends Promise<AggregatePlaylist>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePlaylistSubscription
  extends Promise<AsyncIterator<AggregatePlaylist>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SnapshotConnection {
  pageInfo: PageInfo;
  edges: SnapshotEdge[];
}

export interface SnapshotConnectionPromise
  extends Promise<SnapshotConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SnapshotEdge>>() => T;
  aggregate: <T = AggregateSnapshotPromise>() => T;
}

export interface SnapshotConnectionSubscription
  extends Promise<AsyncIterator<SnapshotConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SnapshotEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSnapshotSubscription>() => T;
}

export interface SnapshotEdge {
  node: Snapshot;
  cursor: String;
}

export interface SnapshotEdgePromise
  extends Promise<SnapshotEdge>,
    Fragmentable {
  node: <T = SnapshotPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SnapshotEdgeSubscription
  extends Promise<AsyncIterator<SnapshotEdge>>,
    Fragmentable {
  node: <T = SnapshotSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSnapshot {
  count: Int;
}

export interface AggregateSnapshotPromise
  extends Promise<AggregateSnapshot>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSnapshotSubscription
  extends Promise<AsyncIterator<AggregateSnapshot>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface User {
  id: ID_Output;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  auths: <T = FragmentableArray<UserAuth>>(args?: {
    where?: UserAuthWhereInput;
    orderBy?: UserAuthOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  auths: <T = Promise<AsyncIterator<UserAuthSubscription>>>(args?: {
    where?: UserAuthWhereInput;
    orderBy?: UserAuthOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  auths: <T = FragmentableArray<UserAuth>>(args?: {
    where?: UserAuthWhereInput;
    orderBy?: UserAuthOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserAuth {
  id: ID_Output;
  type: AuthType;
  authId: String;
  extra?: Json;
}

export interface UserAuthPromise extends Promise<UserAuth>, Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<AuthType>;
  user: <T = UserPromise>() => T;
  authId: () => Promise<String>;
  extra: () => Promise<Json>;
}

export interface UserAuthSubscription
  extends Promise<AsyncIterator<UserAuth>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<AuthType>>;
  user: <T = UserSubscription>() => T;
  authId: () => Promise<AsyncIterator<String>>;
  extra: () => Promise<AsyncIterator<Json>>;
}

export interface UserAuthNullablePromise
  extends Promise<UserAuth | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<AuthType>;
  user: <T = UserPromise>() => T;
  authId: () => Promise<String>;
  extra: () => Promise<Json>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserAuthConnection {
  pageInfo: PageInfo;
  edges: UserAuthEdge[];
}

export interface UserAuthConnectionPromise
  extends Promise<UserAuthConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserAuthEdge>>() => T;
  aggregate: <T = AggregateUserAuthPromise>() => T;
}

export interface UserAuthConnectionSubscription
  extends Promise<AsyncIterator<UserAuthConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserAuthEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserAuthSubscription>() => T;
}

export interface UserAuthEdge {
  node: UserAuth;
  cursor: String;
}

export interface UserAuthEdgePromise
  extends Promise<UserAuthEdge>,
    Fragmentable {
  node: <T = UserAuthPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserAuthEdgeSubscription
  extends Promise<AsyncIterator<UserAuthEdge>>,
    Fragmentable {
  node: <T = UserAuthSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUserAuth {
  count: Int;
}

export interface AggregateUserAuthPromise
  extends Promise<AggregateUserAuth>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserAuthSubscription
  extends Promise<AsyncIterator<AggregateUserAuth>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface PlaylistSubscriptionPayload {
  mutation: MutationType;
  node: Playlist;
  updatedFields: String[];
  previousValues: PlaylistPreviousValues;
}

export interface PlaylistSubscriptionPayloadPromise
  extends Promise<PlaylistSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PlaylistPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PlaylistPreviousValuesPromise>() => T;
}

export interface PlaylistSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PlaylistSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PlaylistSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PlaylistPreviousValuesSubscription>() => T;
}

export interface PlaylistPreviousValues {
  id: ID_Output;
  created_at: DateTimeOutput;
  modified_at: DateTimeOutput;
  type: PlaylistType;
  source_id: String;
}

export interface PlaylistPreviousValuesPromise
  extends Promise<PlaylistPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  created_at: () => Promise<DateTimeOutput>;
  modified_at: () => Promise<DateTimeOutput>;
  type: () => Promise<PlaylistType>;
  source_id: () => Promise<String>;
}

export interface PlaylistPreviousValuesSubscription
  extends Promise<AsyncIterator<PlaylistPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  created_at: () => Promise<AsyncIterator<DateTimeOutput>>;
  modified_at: () => Promise<AsyncIterator<DateTimeOutput>>;
  type: () => Promise<AsyncIterator<PlaylistType>>;
  source_id: () => Promise<AsyncIterator<String>>;
}

export interface SnapshotSubscriptionPayload {
  mutation: MutationType;
  node: Snapshot;
  updatedFields: String[];
  previousValues: SnapshotPreviousValues;
}

export interface SnapshotSubscriptionPayloadPromise
  extends Promise<SnapshotSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SnapshotPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SnapshotPreviousValuesPromise>() => T;
}

export interface SnapshotSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SnapshotSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SnapshotSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SnapshotPreviousValuesSubscription>() => T;
}

export interface SnapshotPreviousValues {
  id: ID_Output;
  created_at: DateTimeOutput;
  data?: Json;
}

export interface SnapshotPreviousValuesPromise
  extends Promise<SnapshotPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  created_at: () => Promise<DateTimeOutput>;
  data: () => Promise<Json>;
}

export interface SnapshotPreviousValuesSubscription
  extends Promise<AsyncIterator<SnapshotPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  created_at: () => Promise<AsyncIterator<DateTimeOutput>>;
  data: () => Promise<AsyncIterator<Json>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface UserAuthSubscriptionPayload {
  mutation: MutationType;
  node: UserAuth;
  updatedFields: String[];
  previousValues: UserAuthPreviousValues;
}

export interface UserAuthSubscriptionPayloadPromise
  extends Promise<UserAuthSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserAuthPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserAuthPreviousValuesPromise>() => T;
}

export interface UserAuthSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserAuthSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserAuthSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserAuthPreviousValuesSubscription>() => T;
}

export interface UserAuthPreviousValues {
  id: ID_Output;
  type: AuthType;
  authId: String;
  extra?: Json;
}

export interface UserAuthPreviousValuesPromise
  extends Promise<UserAuthPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<AuthType>;
  authId: () => Promise<String>;
  extra: () => Promise<Json>;
}

export interface UserAuthPreviousValuesSubscription
  extends Promise<AsyncIterator<UserAuthPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<AuthType>>;
  authId: () => Promise<AsyncIterator<String>>;
  extra: () => Promise<AsyncIterator<Json>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

export type Json = any;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "AuthType",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "UserAuth",
    embedded: false
  },
  {
    name: "PlaylistType",
    embedded: false
  },
  {
    name: "Playlist",
    embedded: false
  },
  {
    name: "Snapshot",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `${process.env["PRISMA_ENDPOINT"]}`
});
export const prisma = new Prisma();
